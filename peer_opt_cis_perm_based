#!/usr/bin/env snakemake

"""
Snakemake PEER pipeline
=======================

Snakemake pipeline for optimizing PEER facotrs in trans-eQTL study.
  step1: check if any particular PEER factor is under genetic control
  step2: see the number of PEER factor that maximize cis-eGene or trans-eGene discovery
"""
#this snakefile is supposed to be run in ~/muscle_trans_snk/peer_all_gene/trans_opt
#original file
#genotype is ~/muscle_trans_snk/data/genotypes.vcf.gz; peer_gwas used all snps but in peer_opt a LD pruned list of SNPs is used
#original gene file is data/moltraits_trans.bed.gz, some rules can turn it into QTLtools required format
#cov file starts with ~/muscle_trans_snk/data/covariates.txt.gz, some rules will merge peer factors in
#make sure all three files have same sample name; I think QTLtools can handel samples in different order, but have
#always give samples in same order so far

rule final:
    input:
        #gwas results of each PEER factor
        #'mkdir.OK',
        #permute res in each dir
        #expand('../peer_runs/factor_{k_opt}/qtltools_permute-significant.tsv.gz',k_opt=config['PEER_FACTORS_OPT']),
        #cis nominal pass
        #'peer_factors-qtltools_perm-summary.tsv'
        'eGene_cis_peer_factors-qtltools_perm-summary.pdf'
        
# Running eQTL mapping for each number of PEER factors prep ###############################################################
rule mkdir_2:
    output:
     '../peer_runs/factor_{k_opt}/mkdir.OK'
    shell:
      'mkdir -p ../peer_runs/factor_{wildcards.k_opt}/data/; '
      'mkdir -p ../peer_runs/factor_{wildcards.k_opt}/plots/; '
      'touch ../peer_runs/factor_{wildcards.k_opt}/mkdir.OK'

rule ld_prune:
  input:
    expand('../peer_runs/factor_{k_opt}/mkdir.OK',k_opt=config['PEER_FACTORS_OPT']),
    vcf = '../../data_201906/genotypes.vcf.gz'
  output:
    prune_in = 'data/ld_prune.prune.in',
    prune_out = 'data/ld_prune.prune.out',
    prune_nosex = 'data/ld_prune.nosex',
    prune_log = 'data/ld_prune.log'
  params:
    plink_ld_prune=config['PLINK_LD_PRUNE']
  shell:
    'plink-1.9 --vcf {input.vcf} --keep-allele-order --indep-pairwise {params.plink_ld_prune} --out data/ld_prune'
 
rule tabix_ld_prune:
  input:
    snps = rules.ld_prune.output.prune_in,
    vcf = rules.ld_prune.input.vcf
  output:
    vcf = 'data/genotypes.vcf.gz',
    tbi = 'data/genotypes.vcf.gz.tbi'
  params:
    plink_ld_prune=config['PLINK_LD_PRUNE'],
  shell:
    'vcftools --gzvcf {input.vcf} --snps {input.snps} --recode --stdout | vcf-sort | bgzip -c > {output.vcf}; '
    'tabix -p vcf {output.vcf}'
    
rule qtltools__prep_vcf:
    """
    Symlink vcf file in each PEER factor directory. 
    
    Input:
        data/genotypes.vcf.gz = expected to be provided by use
        data/genotypes.vcf.gz.tbi = can be generated using qtltools_prep__vcf 
            method from ../qtl/Snakefile
    """
    input:
        vcf = rules.tabix_ld_prune.output.vcf,
        tbi = rules.tabix_ld_prune.output.tbi
    output:
        '../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz',
        '../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz.tbi'
    shell:
        'for i in {input}; do '
            'out_i=`basename $i`; '
            'in_i=$( scripts/realpath $i ); '
            'ln -s $in_i ../peer_runs/factor_{wildcards.k_opt}/data/$out_i; '
        'done'

rule prep_moltraits:
    input:
      'data/moltraits_trans.bed.gz'
    output:
      'data/moltraits_trans_qtltools.bed.gz'
    params:
      r_script= '~/muscle_trans_snk/scripts/prep_qtltools_pheno_bed.R', #should add inv_norm function to it
      awksort= '~/muscle_trans_snk/scripts/general-sort_bed_with_header.awk',
      anno = '~/muscle_trans_snk/scripts/pos_strand.tab.gz',
      start_col = config['INPUT_PREP_PHENO_QTLTOOLS_START_COL'],
      feature_col= config['INPUT_PREP_PHENO_QTLTOOLS_FEATURE_COL']
      
    shell:
       #merge gene:chr,start,end to make it an input file for QTLtools
      'Rscript {params.r_script} -i {input} -a {params.anno} -c {params.start_col} -f {params.feature_col} -n TRUE -o data/moltraits_trans_qtltools_unsort; '
       #sort chr and start
      'gunzip -c data/moltraits_trans_qtltools_unsort.bed.gz | {params.awksort} | bgzip -c > {output} ; '
       #rm intermediate file
      'rm data/moltraits_trans_qtltools_unsort.bed.gz '
      
rule tabix_moltraits:
    """
      tabix moltraits_trans_qtltools.tab.gz before giving to QTLtools
    """
    input:
      rules.prep_moltraits.output
    output:
      'data/moltraits_trans_qtltools.bed.gz.tbi'
    shell:
      'tabix {input}'

rule qtltools__prep_moltraits:
    """
    Symlink bed file in each PEER factor directory. This file will serve as 
    the y variable for QTL mapping.
    """
    input:
        peer_input = rules.tabix_moltraits.input,
        tbi = rules.tabix_moltraits.output
        #resid='peer_runs/factor_{k_opt}/moltraits-peer_residuals.bed.gz',
        #resid_nrm='peer_runs/factor_{k_opt}/moltraits-peer_residuals-invnorm.bed.gz'
    output:
        cis_y = '../peer_runs/factor_{k_opt}/data/moltraits.bed.gz',
        cis_y_tbi = '../peer_runs/factor_{k_opt}/data/moltraits.bed.gz.tbi',
        trans_y = '../peer_runs/factor_{k_opt}/data/moltraits_trans_qtltools.bed.gz',
        trans_y_tbi = '../peer_runs/factor_{k_opt}/data/moltraits_trans_qtltools.bed.gz.tbi'
    params:
        y_file=config['PARAM_QTLTOOLS_Y']
    run:
        if params.y_file == 'peer_input':
            shell('ln -s $( scripts/realpath {input.peer_input} ) {output.cis_y};'
                  'ln -s $( scripts/realpath {input.tbi} ) {output.cis_y_tbi};'
                  'ln -s $( scripts/realpath {input.peer_input} ) {output.trans_y};'
                  'ln -s $( scripts/realpath {input.tbi} ) {output.trans_y_tbi};')
        elif params.y_file == 'peer_resid':
            shell('ln -s $( scripts/realpath {input.resid} ) {output}')
        elif params.y_file == 'peer_resid_norm':
            shell('ln -s $( scripts/realpath {input.resid_nrm} ) {output}')
        else:
            raise WorkflowError('Invalid PARAM_QTLTOOLS_Y value: %s.' % (params.y_file))

rule qtltools__prep_covs:
    """
    Set up potential covariates for QTLtools.
    
    Writes peer_runs/factor_{k}/data/covariates.*.gz.
    Note covariates.tsv.gz needs to be space separated (txt.gz) I found this not ture, tab deliminated is fine.
    
    if PARAM_PEER_QTLTOOLS_BASE_COVAR == '': 
        peer_runs/factor_{k}/data/covariates.*.gz will contain PEER factors
    else:
        peer_runs/factor_{k}/data/covariates.*.gz will contain PEER factors
        rbound with the specified tsv.gz matrix file.
    """
    input:
        '../peer_runs/factor_{k_opt}/moltraits-peer_factors.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/data/covariates.txt.gz'
    params:
        script_rbind='~/muscle_trans_snk/scripts/general-matrix_rbind.py',
        base_covariates_file=config['PARAM_PEER_QTLTOOLS_BASE_COVAR']
    run:
        out_txt = '../peer_runs/factor_{wildcards.k_opt}/data/covariates.txt.gz'
        if any({params.base_covariates_file}):
            cmd = 'python {params.script_rbind} '
            cmd = '%s {params.base_covariates_file}' % cmd 
            cmd = '%s --add_mtx {input} ' % cmd 
            cmd = '%s --out_file ../peer_runs/factor_{wildcards.k_opt}/data/covariates' % cmd 
        else:
            cmd = 'ln -s $( scripts/realpath {input} ) %s' % out_txt
        shell(cmd)
                
rule qtltools__prep_analysis_config:
    """
    Copy analysis config file in each PEER factor directory
    """
    input:
        'peer_opt_trans.json'
    output:
        '../peer_runs/factor_{k_opt}/peer_opt_trans.json'
    shell:
        'cp {input} {output}'

# rule qtltools__prep_analysis_scripts:
#     """
#     Link scripts dir to each PEER factor directory
#     """
#     input:
#         'scripts/'
#     output:
#         '../peer_runs/factor_{k_opt}/'
#     shell:
#         'cp ir {input} {output}'

rule qtltools__prep_analysis_scripts:
    """
    Link scripts dir to each PEER factor directory
    """
    input:
        'scripts/'
    output:
        '../peer_runs/factor_{k_opt}/scripts'
    run:
        shell('ln -s $( scripts/realpath {input} ) {output}')
        
rule qtltools__in_subdir_clean_logs:
    """
    Clears logs for each PEER factor iteration
    """
    shell:
        'rm -r ../peer_runs/factor_*/logs/'
        
#rule qtltools__in_subdir_clean_singularity:
#    """
#    Clears Singularity images for each PEER factor iteration
#    """
#    shell:
#        'rm -r peer_runs/factor_*/.snakemake/singularity'
################################################################################

# QTLtools: cis nominal ############################################################
rule qtltools__perm_in_subdir:
    """
    Run QTLtools from within each PEER factor directory by cd into the PEER
    factor directory, loading the QTLtools Snakemake file, and calling the
    qtltools_proximal__nominal_concat function within the Snakemake file (which 
    generates the qtltools_nominal.tsv.gz output file).
    """
    input:
        geno='../peer_runs/factor_{k_opt}/data/genotypes.vcf.gz',
        pheno='../peer_runs/factor_{k_opt}/data/moltraits.bed.gz',
        cov='../peer_runs/factor_{k_opt}/data/covariates.txt.gz',
        config_analysis='../peer_runs/factor_{k_opt}/peer_opt_trans.json'
        #config_cluster='peer_runs/factor_{k_opt}/config_cluster.json'
    output:
        '../peer_runs/factor_{k_opt}/qtltools_permute-significant.tsv.gz'
    params:
        script_snakefile='~/muscle_trans_snk/eQTL/cis/Snakefile'
        #script_cluster_submit=srcdir('../wrappers/cluster/lsf.py')
    run:
        cmd = 'cd ../peer_runs/factor_{wildcards.k_opt}; '
        cmd = '%s config_analysis=`basename {input.config_analysis}`; ' % cmd
        #if config['PARAM_QTLTOOLS_SWARM']:
        #    cmd = '%s config_cluster=`basename {input.config_cluster}`; ' % cmd
        
        cmd = '%s snakemake qtltools_proximal__permute_fdr  ' % cmd
        cmd = '%s --snakefile {params.script_snakefile}  ' % cmd
        cmd = '%s --configfile $config_analysis --printshellcmds ' % cmd
        shell(cmd)

rule qtltools__optimize_each_dir_perm:
    """
    Summarize the total number of nominally significant QTLs across per PEER 
    factor run. 
    """
    input:
        '../peer_runs/factor_{k_opt}/qtltools_permute-significant.tsv.gz'
    output:
        '../peer_runs/factor_{k_opt}/qtltools_permute-significant-summary.tsv'
    shell:
        # generate the output file
        'num_gene=`gzip -cd {input} | wc -l `; ' #next rule goint to -1
        'echo -e "{wildcards.k_opt}\t$num_gene" > {output}; '
        #'gzip -c {output.out_file}.tmp > {output.out_file}; '
        #'rm {output.out_file}.tmp; '

rule qtltools__optimize_each_perm:
    """
    Summarize the total number of nominally significant QTLs across all PEER 
    factor runs. 
    """
    input:
        expand('../peer_runs/factor_{k_opt}/qtltools_permute-significant-summary.tsv',k_opt=config['PEER_FACTORS_OPT'])
    output:
        out_file='peer_factors-qtltools_perm-summary.tsv'
    shell:
        # generate the output file
        'echo -e "num_peer\tnum_eGene" > {output.out_file}; '
        'cat {input} >> {output.out_file}; ' #next rule goint to -1
           
rule qtltools__optimize_perm_plot:
    """
    Summarize the total number of nominally significant QTLs across all PEER 
    factor runs. 
    """
    input:
        rules.qtltools__optimize_each_perm.output.out_file
    output:
        out_plot_eGene='eGene_cis_peer_factors-qtltools_perm-summary.pdf'
    params:
        script_optimize=srcdir('scripts/Li_peer-optimize_perm_plot.R')
    shell:        
        # plot the output file eGene
        'Rscript {params.script_optimize} '
            '--file {rules.qtltools__optimize_each_perm.output.out_file} '
            '--y_axis_label "Number of molecular traits" '
            '--out_file `basename {output.out_plot_eGene} .pdf`; '
        
################################################################################
