#!/usr/bin/env snakemake

"""
Snakemake QTL pipeline
----------------------

Snakemake pipeline for molecular trait QTL mapping
"""

__version__ = '0.1.4'


def chunker(seq, size):
    """
    Chunks a big list (<seq>) into smaller groups, defined by <size>. 
    """
    res = []
    for el in seq:
        res.append(el)
        if len(res) == size:
            yield res
            res = []
    if res:
        yield res


rule all_qtl:
    input:
        # QTLtools nominal associations
        'qtltools_nominal.tsv.gz',
        
        # QTLtools permutation associations
        #'qtltools_permute.tsv.gz'
        #'plots/qtltools_permute-check_beta_approx.png',

        # QTLtools conditional associations
        #'qtltools_conditional.tsv.gz',

    

# QTLtools: file prep ##########################################################
rule qtltools_prep__vcf:
    """
    QTLtools:   generate tabix index of vcf input files 
    """
    input:
        'data/genotypes.vcf.gz'
    output:
        'data/genotypes.vcf.gz.tbi'
    shell:
        'tabix {input}'


rule qtltools_prep__bed:
    """
    QTLtools:   generate tabix index of bed input files 
    """
    input:
        'data/moltraits.bed.gz'
    output:
        'data/moltraits.bed.gz.tbi'
    shell:
        'tabix {input}'
################################################################################


# QTLtools: nominal pass #######################################################
rule qtltools_proximal__nominal:
    """
    QTLtools:   nominal proximal mapping (association with all variants)
    """
    input:
        geno='data/genotypes.vcf.gz',
        geno_tbi='data/genotypes.vcf.gz.tbi',
        pheno='data/moltraits.bed.gz',
        pheno_tbi='data/moltraits.bed.gz.tbi'
    output:
        'swarm_qtltools_nominal/qtltools_nominal-{j_cur}_{j_total}.txt'
    params:
        other_param=config['PARAM_QTLTOOLS'],
        nominal_cutoff=config['PARAM_QTLTOOLS_NOMINAL_CUTOFF']
    shell:
        'QTLtools cis --vcf {input.geno} --bed {input.pheno} '
            '--nominal {params.nominal_cutoff} ' 
            #'--normal ' # force the input phenotype to N(0, 1) 
            '--seed 15112011 ' # seed for random number generator
            '--window 1000000 ' # window size. default = 1Mb
            '--chunk {wildcards.j_cur} {wildcards.j_total} ' # for swarming
            '{params.other_param} ' # PARAM from config
            '--out {output}'

rule qtltools_proximal__nominal_concat:
    """
    QTLtools: swarm proximal mapping & combine the output
    
    Notes:
    - 1 based so first iteration is 1 not 0.
    - removes the temp input data
    """
    input:
        expand(
            'swarm_qtltools_nominal/qtltools_nominal-{j_cur}_{j_total}.txt', 
            j_cur=range(1, config['NJOBS_NOMINAL']+1), 
            j_total=config['NJOBS_NOMINAL']
        )
    output:
        'qtltools_nominal.tsv.gz'
    shell:
        # add the header to the output file
        'echo "pheno_id '
            'pheno_chr pheno_start pheno_end pheno_strand '
            'n_proximal_var pheno_var_dist '
            'var_id var_chr var_start var_end '
            'p_nominal beta top_proximal_var" | '
        'sed s/" "/"\t"/g | gzip -c > {output}; '
            
        # cat swarm files to make the output file
        'cat {input} | sed s/" "/"\t"/g | gzip -c >> {output}; '
        
        # remove the temp files and swarm directory
        #'rm {input}; ' # no need to by defining temp() in previous rule
        'rm -r swarm_qtltools_nominal; '
################################################################################


# QTLtools: permute pass #######################################################
rule qtltools_proximal__permute:
    """
    QTLtools:   proximal mapping where genotypes are permuted and top proximal 
                variant returned
                
    Notes:
    - only cases where the first qtl is < threshold are in the output
    """
    input:
        geno='data/genotypes.vcf.gz',
        geno_tbi='data/genotypes.vcf.gz.tbi',
        pheno='data/moltraits.bed.gz',
        pheno_tbi='data/moltraits.bed.gz.tbi'
    output:
        temp('swarm_qtltools_permute/qtltools_permute-{j_cur}_{j_total}.txt')
    params:
        other_param=config['PARAM_QTLTOOLS'],
        n_perm=config['NPERM']
    shell:
        'QTLtools cis --vcf {input.geno} --bed {input.pheno} '
            '--permute {params.n_perm} ' # qtltools not have adaptive perm
            #'--normal ' # force the input phenotype to N(0, 1) 
            '--seed 15112011 ' # seed for random number generator
            '--window 1000000 ' # window size. default = 1Mb
            '--chunk {wildcards.j_cur} {wildcards.j_total} ' # for swarming
            '{params.other_param} ' # PARAM from config
            '--out {output}'


rule qtltools_proximal__permute_concat:
    """
    QTLtools:   swarm proximal mapping & combine the output
    
    Notes:
    - 1 based so first iteration is 1 not 0.
    - removes the temp input data
    """
    input:
        expand(
            'swarm_qtltools_permute/qtltools_permute-{j_cur}_{j_total}.txt',
            j_cur=range(1, config['NJOBS_PERMUTE']+1), 
            j_total=config['NJOBS_PERMUTE']
        )
    output:
        'qtltools_permute.tsv.gz'
    shell:
        # add the header to the output file        
        'echo "pheno_id '
            'pheno_chr pheno_start pheno_end pheno_strand '
            'n_proximal_var pheno_var_dist '
            'var_id var_chr var_start var_end '
            'p_degree_freedom '
            'dummy '
            'beta_dist_par1 beta_dist_par2 '
            'p_nominal beta '
            'p_empirical p_adjust_beta_dist" | '
        'sed s/" "/"\t"/g | gzip -c > {output}; '
            
        # cat swarm files to make the output file
        'cat {input} | sed s/" "/"\t"/g | gzip -c >> {output}; '
        
        # remove the temp swarm directory
        #'rm {input}; '
        'rm -r swarm_qtltools_permute; '

rule qtltools_proximal__permute_fdr:
    """
    QTLtools:   run the FDR script for the permuted data
    """
    input:
        'qtltools_permute.tsv.gz'
    output:
        'qtltools_permute-significant.tsv.gz',
        'qtltools_permute-thresholds.txt.gz'
    params:
        shell_script=srcdir('scripts/qtltools-runFDR_cis.R')
    shell:
        'Rscript {params.shell_script} {input} 0.05 `basename {input} .tsv.gz`'

rule qtltools_proximal__plot__check_beta_approx:
    input:
        'qtltools_permute.tsv.gz'
    output:
        'plots/qtltools_permute-check_beta_approx.png',
        'plots/qtltools_permute-check_beta_approx-neglog10.png'
    params:
        shell_script=srcdir('scripts/qtltools-check_beta_approx.R')
    shell:
        'Rscript {params.shell_script} {input} '
            'plots/`basename {input} .tsv.gz`-check_beta_approx'
################################################################################


# QTLtools: conditional pass ###################################################
rule qtltools_proximal__conditional_unzip_threshold:
    """
    QTLtools requires uncompressed thresholds file.
    """
    input:
        'qtltools_permute-thresholds.txt.gz'
    output:
        'qtltools_permute-thresholds.txt'
    shell:
        'gunzip -c {input} > {output}'
        
rule qtltools_proximal__conditional:
    """
    QTLtools:   conditional proximal mapping using thresholds from permuted data
    """
    input:
        geno='data/genotypes.vcf.gz',
        geno_tbi='data/genotypes.vcf.gz.tbi',
        pheno='data/moltraits.bed.gz',
        pheno_tbi='data/moltraits.bed.gz.tbi',
        pheno_thresh='qtltools_permute-thresholds.txt'
    output:
        temp('swarm_qtltools_conditional/qtltools_conditional-{j_cur}_{j_total}.txt')
    params:
        other_param=config['PARAM_QTLTOOLS']
    shell:
        'QTLtools cis --vcf {input.geno} --bed {input.pheno} '
            '--mapping {input.pheno_thresh} ' # thresholds
            #'--normal ' # force the input phenotype to N(0, 1) 
            '--seed 15112011 ' # seed for random number generator
            '--window 1000000 ' # window size. default = 1Mb
            '--chunk {wildcards.j_cur} {wildcards.j_total} ' # for swarming
            '{params.other_param} ' # PARAM from config 
            '--out {output}'

rule qtltools_proximal__conditional_concat:
    """
    QTLtools:   swarm proximal mapping & combine the output
    
    Notes:
    - 1 based so first iteration is 1 not 0.
    - removes the temp input data
    """
    input:
        expand(
            'swarm_qtltools_conditional/qtltools_conditional-{j_cur}_{j_total}.txt',
            j_cur=range(1, config['NJOBS_CONDITIONAL']+1), 
            j_total=config['NJOBS_CONDITIONAL']
        )
    output:
        'qtltools_conditional.tsv.gz'
    run:
        # add the header to the output file        
        cmd = 'echo "pheno_id'
        cmd = '%s pheno_chr pheno_start pheno_end pheno_strand' % cmd
        cmd = '%s n_proximal_var pheno_var_dist' % cmd
        cmd = '%s var_id var_chr var_start var_end' % cmd
        cmd = '%s var_rank' % cmd # if variant = 1st (rank=0), 2nd best (rank=1)
        cmd = '%s p_nominal_forward beta_forward' % cmd
        cmd = '%s var_top_rank_forward var_p_below_threshold_forward' % cmd
        cmd = '%s p_nominal_backward beta_backward' % cmd
        cmd = '%s var_top_rank_backward var_p_below_threshold_backward"' % cmd
        cmd = '%s | sed s/" "/"\t"/g' % cmd
        cmd = '%s | gzip -c > qtltools_conditional.tsv.gz;' % cmd
        shell(cmd)
        
        
        # cat swarm files to make the output file
        # "xargs -n 250 cat" handles case where we want to cat thousands of 
        # files, raising an "Argument list too long" error.
        # 
        # instead of shell solution, chunck over file using python to make cmd
        for i in chunker(input, 100):
            cmd = 'cat %s | sed s/" "/"\t"/g' %  " ".join(i)
            cmd = '%s | gzip -c >> qtltools_conditional.tsv.gz;' % cmd
            shell(cmd)
        
        # compress the thresholds file
        cmd = 'gzip -f qtltools_permute-thresholds.txt;' 
        
        # remove the temp swarm directory
        #'rm {input}; '
        cmd = '%s rm -r swarm_qtltools_conditional;' % cmd
        
        print(cmd)
        shell(cmd)
################################################################################



################################################################################




################################################################################
